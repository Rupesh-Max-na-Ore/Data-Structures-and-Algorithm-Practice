//q1

// Count digits in a number

// Problem Statement: Given an integer N, return the number of digits in N.
import java.util.*;
public class CountDigits{
    protected int digitCount=0;
    protected int n;

    CountDigits(int n){
        this.n=n;
        while(n>0){
            n=n/10;
            digitCount++;
        }}
    public void PrintNoOfDigits(){
        System.out.println("No. of digits= "+digitCount);
    }

    
public static void main(String args[]){
    Scanner s=new Scanner(System.in);
    System.out.print("Enter a no. as input:");
    int n=s.nextInt();
    CountDigits CD= new CountDigits(n);
    CD.PrintNoOfDigits();
    s.close();
}

}

//q2

// Reverse a number 

// Problem Statement: Given a number N reverse the number and print it.

import java.util.Scanner;

public class ReverseNo {
    protected int n;
    // protected int r=0;
    // protected int t=0;

    ReverseNo(int num){
        n=num;
        
    }

    public int actuallyRev(){
        //Same way
        // while(num>0){
        //     t=num%10;
        //     r=r*10+t;
        //     num=num/10;
        // }
        // return r;
        int dig = 0;
        int rev = 0;
        while(n!=0){

            dig = n%10;
            rev *= 10;
            rev += dig;
            n /= 10;

        }

        return rev;

    }
    


    

    public static void main(String[] args) {
        Scanner s=new Scanner(System.in);
        System.out.println("Enter value for n: ");
        int n=s.nextInt();
        System.out.print("Reverse of "+n+"=");
        ReverseNo rev=new ReverseNo(n);
        int reverse= rev.actuallyRev();
        System.out.print(reverse);
         s.close();
    }


    
}

//q3

// Check if a number is Palindrome or Not

// Problem Statement: Given an integer N, return true if it is a palindrome else return false.

// A palindrome is a number that reads the same backward as forward. 
// For example, 121, 1331, and 4554 are palindromes because they remain the same when their digits are reversed.

// Enter a no.: 7667
// Enter a string: ruppur

// Yes, string is Palindrome
// Yes, no. is Palindrome

// Enter a no.: 111
// Enter a string: loooj
// No, string ain't Palindrome
// Yes, no. is Palindrome

import java.util.*;
public class Palindrome {
    int n;
    String str;
    Palindrome(int num){
        n=num;
    }
    Palindrome(String s){
        str=s;
    }
    //First attempt
    // public boolean IntCheckPalindrome(){
    //     int i1,i2;
    //     int length=0;
    //     int N=n;
    //     while(N>0){
    //         N=N/10; length++;
    //     }int odd;
    //     if(length%2==0) {i1=length/2; odd=0;} 
    //     else {i1=length/2; odd=1;}

    //     //Reverse half of no. from backwards direction
    //     int dig = 0;
    //     int hrev = 0;
    //     int n1=n;
    //     for(i2=0;i2<=i1;i2++){

    //         dig = n1%10;
    //         hrev *= 10;
    //         hrev += dig;
    //         n1 /= 10;
    //         System.out.println("Half rev= " +hrev);

    //     }if(odd==1) n1/=10;


    //     if(n1==hrev) {
    //         return true;
    //     }else{return false;}

    // }

    //optimized attempt
    public boolean IntCheckPalindrome() {
        int length = 0;
        int N = n;
        while (N > 0) {
            N = N / 10;
            length++;
        }
    
        int i1 = length / 2;
        int odd;
        if(length%2==0) { odd=0;} 
         else {odd=1;}
        int n1 = n;
        int hrev = 0;
        for (int i2 = 0; i2 < i1; i2++) {
            int dig = n1 % 10;
            hrev = hrev * 10 + dig;
            n1 /= 10;
        } if(odd==1) n1/=10;
    
        return n1 == hrev;
    }
    
    //FIrst attempt
    // public boolean StringCheckPalindrome(){
    //     int len=str.length(); int n2;int i; int odd;int br=0;
    //     if (len%2==0){n2=len/2;odd=0;}
    //     else{n2=len/2;odd=1;}
    //     for (i=0;i<=n2;i++)
    //     {
    //         if(str.charAt(i)==str.charAt(n2-i-1)) continue;
    //         else {br=1;break;}
    //     }
    //     if(br==1) return false;
    //     else return true;
    // }
    //Optimized attempt
    public boolean StringCheckPalindrome() {
        int len = str.length();
        int n2 = len / 2;
        for (int i = 0; i < n2; i++) {
            if (str.charAt(i) != str.charAt(len - i - 1)) {
                return false;
            }
        }
        return true;
    }
    

    public static void main(String[] args) {
        Scanner sc=new Scanner(System.in);
        System.out.print("Enter a no.: ");
        int n=sc.nextInt();
        sc.nextLine();   
        System.out.print("Enter a string: ");
        String string=sc.nextLine();
        

        Palindrome p=new Palindrome(string);
        Palindrome pp=new Palindrome(n);

        boolean pt = p.StringCheckPalindrome();
        boolean ppt=pp.IntCheckPalindrome();

        if(pt==true){
            System.out.println("Yes, string is Palindrome");
        }else{
            System.out.println("No, string ain't Palindrome");
        }

        if(ppt==true){
            System.out.println("Yes, no. is Palindrome");
        }else{
            System.out.println("No, no. given ain't Palindrome");
        }
        sc.close();

    }

    
}

// q4

// Find GCD of two numbers

// Problem Statement: Given two integers N1 and N2, find their greatest common divisor.

// The Greatest Common Divisor of any two integers is the largest number that divides both integers.

import java.util.Scanner;

public class Gcd {
    public static int calcGcd(int a, int b) {
        while(a > 0 && b > 0) {
            if(a > b) {
                a=a-b;
                //as good as a = a % b;
            }  else {
                b=b-a;
                //equivalent to b = b % a;
           }
        }
        if(a == 0) {
            return b;
        }
        return a;
    }

    public static void main(String[] args) {
        Scanner s=new Scanner(System.in);
        System.out.println("Enter value for n1 & n2: ");
        int n1=s.nextInt(); int n2=s.nextInt();
        int gcd = calcGcd(n1, n2);
        System.out.println("GCD of " + n1 + " and " + n2 + " is: " + gcd); s.close();
    }
}

//q5
// Check if a number is Armstrong Number or not

// Problem Statement: 
// Given an integer N, return true it is an Armstrong number otherwise return false.

// An Amrstrong number is a number that is equal to 
// the sum of its own digits each raised to the power of the number of digits.

import java.util.Scanner;
public class armstrong {

    int n;

    armstrong(int num){
        n = num;
    }

    public void check(){

        int d = 0;
        for(int i = n; i>0; i/=10){
            d++;
        }

        int comp = 0;

        for(int i = n; i>0; i/=10){
            comp += Math.pow((i%10),d);
        }

        if(comp == n)
            System.out.println("No. is armstrong");
        else
            System.out.println("No. is not armstrong.");

    }


    public static void main(String args[]){
        Scanner sc = new Scanner(System.in);
        System.out.println("Inter a number: ");
        int num = sc.nextInt();
        sc.close();
        armstrong obj= new armstrong(num);
        obj.check();

    }
    
}

//q6
// Print all Divisors of a given Number

// Problem Statement: Given an integer N, return all divisors of N.
// A divisor of an integer N is a positive integer that divides N without leaving a remainder. In other words, 
// if N is divisible by another integer without any remainder, then that integer is considered a divisor of N.

import java.util.Scanner;
public class Divisors {
    int n;

    Divisors(int num){
        n = num;
    }

    public int[] making_khappe(){

        int val = (int)Math.sqrt(n);
        int div[] = new int[val];
        int ind =0;
        for(int i = 1; i<=val; i++){
            if(n%i==0){
                div[ind] = i;
                div[ind+1] = n/i;
                ind++; 
            }

        }
        if(val*val == n)
            div[ind-1]=0;
        return div;

    }

    public void serving_khappe(int[] a){

        for(int i = 0; i<a.length; i++){
            if(a[i] != 0)
            System.out.print(a[i] + " , ");
    
        }
    }
    public static void exec(int k){
        Divisors obj = new Divisors(k);
        obj.serving_khappe(obj.making_khappe());
    }

    public static void main(String args[]){
        Scanner sc = new Scanner(System.in);
        int w = sc.nextInt();
        sc.close();
        exec(w);
    }

}

//q7
// Check if a number is prime or not
// Problem Statement: Given an integer N, check whether it is prime or not. 
// A prime number is a number that is only divisible by 1 and itself and the total number of divisors is 2.

import java.util.Scanner;

public class prime {

    static boolean is_prime(int n){
        
        if(n==2)
            return true;
        for(int i = 2; i<= (int)Math.sqrt(n); i++){   
            if(n%i == 0)
                return false;
        }
        return true;
    }
    
    public static void main(String[] args) {
         Scanner s=new Scanner(System.in);
        System.out.println("Enter value for n: ");
        int n=s.nextInt();
        System.out.println(is_prime(n)); s.close();
    }

}
