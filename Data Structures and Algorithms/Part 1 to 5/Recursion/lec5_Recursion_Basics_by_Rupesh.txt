/*
 q1 and q3 (they are same really)
 Print nos. from 1 to n using Recursion
 */

 import java.util.*;
 public class Print1toN{
 
     protected int n;
 
     Print1toN(int num){
         n=num;
         PrintCount(1,n);
     }
     public static void PrintCount(int i,int n){
         if(i>n) return;
         System.out.println(i);
         PrintCount(i+1,n);
     }
 
     
 public static void main(String args[]){
     Scanner s=new Scanner(System.in);
     System.out.print("Enter a no. as input:");
     int n=s.nextInt();
     Print1toN CD= new Print1toN(n);
     
     s.close();
 }
 
 }

 /*
 q2
 Print string n times using Recursion
 */


import java.util.Scanner;

public class PrintNameNtimes {
    
    public PrintNameNtimes(int num,String str) {
        int n=num;
        System.out.println("Starting to Print "+n+" times:");
        PrintNameCount(1,n,str);
    }
    public static void PrintNameCount(int i,int n,String str){
        if(i>n) return;

        System.out.println(str);
        PrintNameCount(i+1,n, str);
    }
    public static void main(String args[]){
    Scanner s=new Scanner(System.in);
    System.out.print("Enter a no. and String as input:");
    int n=s.nextInt();
    s.nextLine();
    String str=s.nextLine();
    
    PrintNameNtimes CD= new PrintNameNtimes(n,str);
    
    s.close();
}
}

//q4
//Problem: Print from N to 1 using Recursion

import java.util.Scanner;

public class PrintNto1 {
    protected int n;

    PrintNto1(int num){
        n=num;
        System.out.println("Starting to print "+n+" times: ");
        PrintCount(1,n);
    }
    public static void PrintCount(int i,int n){
        if(i>n) return;
        
        PrintCount(i+1,n);

        System.out.println(i);
    }

    
public static void main(String args[]){
    Scanner s=new Scanner(System.in);
    System.out.print("Enter a no. as input:");
    int n=s.nextInt();
    PrintNto1 CD= new PrintNto1(n);
    
    s.close();
}}

//q5
//Problem:sum terms from 1 to N using Recursion

import java.util.Scanner;

public class SumTillN {
    protected int n;

    SumTillN(int num){
        n=num;
        int accum=0;
        System.out.println("Starting to accumulate "+n+" times: ");
        Sum(1,n, accum);
    }
    public static void Sum(int i,int n, int accum){
        if(i>n) {System.out.println("Sum till "+n+" ="+accum);
            return;}
        accum+=i;
        Sum(i+1,n,accum);

        
    }

    
public static void main(String args[]){
    Scanner s=new Scanner(System.in);
    System.out.print("Enter a no. as input:");
    int n=s.nextInt();
    SumTillN CD= new SumTillN(n);
    
    s.close();
}}

//q6 Factorial

import java.util.Scanner;

public class Factorial {
    
    

    Factorial(int num){
        int n=num;
        
        System.out.println("Starting to accumulate "+n+" nos. pdt.: ");
        int accum= Fact(n);
        System.out.println("Factorial of n= "+accum);

    }
    public static int Fact(int n){
        if (n==0) return 1;
        return n*Fact(n-1);

        
    }

    
public static void main(String args[]){
    Scanner s=new Scanner(System.in);
    System.out.print("Enter a no. as input:");
    int n=s.nextInt();
    Factorial CD= new Factorial(n);
    
    s.close();
}
}



//q7 Reverse Array via recursion
import java.util.Scanner;

public class ReverseArray {

    ReverseArray(int A[]){
        int l=A.length;
        int B[]=new int[l];
        System.out.println("Copy og array for reference and testing:");
        for(int i=0;i<l;i++){
        B[i]=A[i];
        }

        actuallyRevArr(A,0,(A.length-1),A.length);
        System.out.println("OG array:");
        printArr(B);
        System.out.println("Reversed array:");
        printArr(A);
        }


    private void actuallyRevArr(int A[], int i, int li, int l) {
        if(i>=li) return;
        int temp=A[i];
        A[i]=A[li];
        A[li]=temp;
        actuallyRevArr(A,(i+1),(li-1),l);
        
    }

    public void printArr(int[] a){
        System.out.print("[");
        for(int i = 0; i<a.length; i++){
            //if(a[i] != 0)
            
            if(i==a.length-1){
                System.out.print(a[i]);
            }else{
                System.out.print(a[i] + " , ");
            }
    
        }System.out.println("]");
    }
    public static void main(String args[]){
    Scanner s=new Scanner(System.in);
    System.out.print("Enter length of array as input:");
    int l=s.nextInt(); int A[]=new int[l];
    System.out.println("Enter Array elements:");
    for(int i=0;i<l;i++){
        System.out.print("A("+i+"): ");
        A[i]=s.nextInt();
    }
    ReverseArray CD= new ReverseArray(A);
    
    s.close();
}
}

//Q8 cHECK sTRING pALINDROME rECURSIVELY

//1ST ATTEMPT, LITTLE MISTAKE, 
//KEEPING IT TO AVOID IT IN FUTURE AS A REMINDER WHILE REVISION
// import java.util.Scanner;

// public class Palindrome {

//     Palindrome(String str)
//     {
//         String s=str;
//         int len=s.length();
//         boolean pal= Pal(s,0,len-1);
//         if(pal==true){
//             System.out.println("Palindrome");
//         }else{
//             System.out.println("Not Palindrome");
//         }
//     }

//     private boolean Pal(String str, int i, int j) {
        //MISTAKE IS HERE, FLIP LINES 22&25 HERE, REVISE WHY IT'S WRONG
//         if(str.charAt(i)!=str.charAt(j)) return false;

//         if(i>=j) return true;

//         Pal(str, i+1, j-1);
//     }

//     public static void main(String args[]){
//     Scanner s=new Scanner(System.in);
//     System.out.print("Enter string as input:");
//     String string=s.nextLine(); 
    
    
//     Palindrome CD= new Palindrome(string);
    
//     s.close();
// }
    
// }

//cORRECT aTTEMPt
import java.util.Scanner;

public class Palindrome {

    Palindrome(String str) {
        String s = str;
        int len = s.length();
        boolean pal = Pal(s, 0, len - 1);
        if (pal == true) {
            System.out.println("Palindrome");
        } else {
            System.out.println("Not Palindrome");
        }
    }

    private boolean Pal(String str, int i, int j) {
        //cORRECTED LINES SWAP
        if (i >= j) {
            return true;
        }
        if (str.charAt(i)!= str.charAt(j)) {
            return false;
        }
`           return Pal(str, i + 1, j - 1);
    }

    public static void main(String args[]) {
        Scanner s = new Scanner(System.in);
        System.out.print("Enter string as input:");
        String string = s.nextLine();
        
        Palindrome CD = new Palindrome(string);
        
        s.close();
    }
}

//q9 Fibonacci Series


import java.util.Scanner;


public class FibSeries {

    FibSeries(int num){
        int n=num;
        System.out.println("Print Fibonacci Series till "+n+" :");
        FiboSeries(n,num);
    }
    public void FiboSeries(int n,int num){
        //if(n==0) System.out.print(FibTerm(0));
        if(n<0) return;
        FiboSeries(n-1,num);
        if(n!=num)
        System.out.print(FibTerm(n) + ",");
        else System.out.print(FibTerm(n));
    
    }
    
    public int FibTerm(int n){
        if(n==0) return 0;
        if(n==1||n==2) return 1;
        return FibTerm(n-1)+FibTerm(n-2);
    }
    public static void main(String args[]){
    Scanner s=new Scanner(System.in);
    System.out.print("Enter a no. as input:");
    int n=s.nextInt();
    FibSeries CD= new FibSeries(n);
    
    s.close();
}
}



