package Binary_Search.BS_on_2D_Arrays;
/*
 * Q1
 * Find the row with maximum number of 1's

Problem Statement: You have been given a non-empty grid ‘mat’ with 'n' rows and 'm' columns consisting of only 0s and 1s. All the rows are sorted in ascending order.
Your task is to find the index of the row with the maximum number of ones.
Note: If two rows have the same number of ones, consider the one with a smaller index. If there's no row with at least 1 zero, return -1.

Pre-requisite: Lower Bound implementation, Upper Bound implementation, & Find the first occurrence of a number.

Examples
Example 1:
Input Format:
 n = 3, m = 3, 
mat[] = 
1 1 1
0 0 1
0 0 0
Result:
 0
Explanation:
 The row with the maximum number of ones is 0 (0 - indexed).

Example 2:
Input Format:
 n = 2, m = 2 , 
mat[] = 
0 0
0 0
Result:
 -1
Explanation:
  The matrix does not contain any 1. So, -1 is the answer.
 */
public class RowWithMax1s {
    int rowWithMax1s(int a[][], int n, int m) {
        int max=0;
        int max_index=-1;
        for(int i=0;i<n;i++){
            int cut1s=m-lowerBound(a[i], m, 1); // #1s in ith row = #cols - col. index of encountering 1st '1'
            if(cut1s>max){
                max=cut1s;
                max_index=i;
            }
            if(max==m) return max_index; // early return, if any row has #1s = #cols, just return that row, no need to check further
        } return max_index;
    }
    public static int lowerBound(int[]a, int n, int k)
    {
        int l=0; int r=n-1; int LUB=n; // Random Ini.
        while(l<=r)
        {
            int m = l+(r-l)/2;
            if(a[m]<k) l=m+1;
            else if(a[m]>=k) 
            {
                LUB=m;
                r=m-1;
            }
        }
        return LUB;
    }
    public static void main(String[] args) {
        RowWithMax1s solution = new RowWithMax1s();
        int[][] mat1 = {
            {1, 1, 1},
            {0, 0, 1},
            {0, 0, 0}
        };
        int result1 = solution.rowWithMax1s(mat1, 3, 3);
        System.out.println("Result 1: " + result1); // Expected: 0

        int[][] mat2 = {
            {0, 0},
            {0, 0}
        };
        int result2 = solution.rowWithMax1s(mat2, 2, 2);
        System.out.println("Result 2: " + result2); // Expected: -1
    }
}

package Binary_Search.BS_on_2D_Arrays;
/*
 * Q2 
 * Search in 2D Matrix
 */
public class SearchIn2DArr {
    /*This approach treats the 2D matrix as a flattened 1D array for the purpose of binary search, 
    ensuring a time complexity of O(log(m*n)), which is efficient for large matrices. */
    public int[] searchMatrix(int[][] a, int k) {
        int n=a.length; int m=a[0].length;
        int l=0; int r=m*n-1;
        while(l<=r){
            int mid=l+(r-l)/2;
            int ro=mid/m;
            int c=mid%m;
            if(a[ro][c]==k) return new int[] {ro,c};
            else if(a[ro][c]<k) l=mid+1;
            else r=mid-1; 
        } return new int[] {-1,-1};
    }
    public static void main(String[] args) {
        SearchIn2DArr solution = new SearchIn2DArr();
        int[][] mat1 = {
            {1, 3, 5, 7},
            {10, 11, 16, 20},
            {23, 30, 34, 60}
        };

        // Search for the number 3 in the matrix
        int[] result1 = solution.searchMatrix(mat1, 3);
        System.out.println("Result 1: [" + result1[0] + ", " + result1[1] + "]"); // Expected: [0, 1]

        // Search for the number 13 in the matrix
        int[] result2 = solution.searchMatrix(mat1, 13);
        System.out.println("Result 2: [" + result2[0] + ", " + result2[1] + "]"); // Expected: [-1, -1]
    }
}
/*
 * LC submission
 * class Solution {
    public boolean searchMatrix(int[][] a, int k) {
        int n=a.length; int m=a[0].length;
        int l=0; int r=m*n-1;
        while(l<=r){
            int mid=l+(r-l)/2;
            int ro=mid/m;
            int c=mid%m;
            if(a[ro][c]==k) return true;
            else if(a[ro][c]<k) l=mid+1;
            else r=mid-1; 
        } return false;
    }
}
 */
package Binary_Search.BS_on_2D_Arrays;
/*
 * Q3
 * Search in a row and column-wise sorted matrix

Problem Statement: You have been given a 2-D array 'mat' of size 'N x M' where 'N' and 'M' denote the number of rows and columns, respectively. The elements of each row and each column are sorted in non-decreasing order.
But, the first element of a row is not necessarily greater than the last element of the previous row (if it exists).
You are given an integer ‘target’, and your task is to find if it exists in the given 'mat' or not.

Pre-requisite: Search in a 2D sorted matrix

Examples
Example 1:
Input Format:
 N = 5, M = 5, target = 14
mat[] = 

Result:
 true
Explanation:
 Target 14 is present in the cell (3, 2)(0-based indexing) of the matrix. So, the answer is true.

Example 2:
Input Format:
 N = 3, M = 3, target = 12,
mat[] = 

Result:
 false
Explanation:
 As target 12 is not present in the matrix, the answer is false.
 */
public class SearchInRowCol {
    public int[] searchMatrix(int[][] a, int k) {
        int n=a.length; int m=a[0].length;
        // using top right to bottom left direction
        int r=0; int c=m-1;
        while((r<=(n-1))&&(c>=0)){
            if(a[r][c]==k) return new int[] {r,c};
            else if(a[r][c]<k) r++; // too low, search successive row
            else c--; // too high, search preceeding column
        } return new int[] {-1,-1};
    }

    public static void main(String[] args) {
        SearchInRowCol solution = new SearchInRowCol();
        int[][] mat1 = {
            {1, 4, 7, 11, 15},
            {2, 5, 8, 12, 19},
            {3, 6, 9, 16, 22},
            {10, 13, 14, 17, 24},
            {18, 21, 23, 26, 30}
        };

        // Search for the number 5 in the matrix
        int[] result1 = solution.searchMatrix(mat1, 5);
        System.out.println("Result 1: [" + result1[0] + ", " + result1[1] + "]"); // Expected: [1, 1]

        // Search for the number 20 in the matrix
        int[] result2 = solution.searchMatrix(mat1, 20);
        System.out.println("Result 2: [" + result2[0] + ", " + result2[1] + "]"); // Expected: [-1, -1]
    }
}
// LC submission
/*
 * class Solution {
    public boolean searchMatrix(int[][] a, int k) {
                int n=a.length; int m=a[0].length;
        // using top right to bottom left direction
        int r=0; int c=m-1;
        while((r<=(n-1))&&(c>=0)){
            if(a[r][c]==k) return true;
            else if(a[r][c]<k) r++; // too low, search successive row
            else c--; // too high, search preceeding column
        } return false;

    }
}
 */

 package Binary_Search.BS_on_2D_Arrays;
/*
 * Q4
 * 1901. Find a Peak Element II
Medium
A peak element in a 2D grid is an element that is strictly greater than all of its adjacent neighbors to the left, right, top, and bottom.

Given a 0-indexed m x n matrix mat where no two adjacent cells are equal, find any peak element mat[i][j] and return the length 2 array [i,j].

You may assume that the entire matrix is surrounded by an outer perimeter with the value -1 in each cell.

You must write an algorithm that runs in O(m log(n)) or O(n log(m)) time.

 

Example 1:



Input: mat = [[1,4],[3,2]]
Output: [0,1]
Explanation: Both 3 and 4 are peak elements so [1,0] and [0,1] are both acceptable answers.
Example 2:



Input: mat = [[10,20,15],[21,30,14],[7,16,32]]
Output: [1,1]
Explanation: Both 30 and 32 are peak elements so [1,1] and [2,2] are both acceptable answers.
 

Constraints:

m == mat.length
n == mat[i].length
1 <= m, n <= 500
1 <= mat[i][j] <= 105
No two adjacent cells are equal.
Seen this question in a real interview before?
1/5
Yes
No
Accepted
66.8K
Submissions
130.2K
Acceptance Rate
51.3%
 */
public class FindPeakInMatrix{
    public int[] findPeakGrid(int[][] a) {
        int r0=a.length; int c=a[0].length;
        int l=0; int r=c-1;
        while(l<=r){
            int m=(l+r)/2;
            int maxRowIndex=findMaxRow(a,r0,c,m); // Find the row index with the max elem in col 'm'
            int lft=(m-1>=0)?a[maxRowIndex][m-1]:-1; // Value to the left of the mid elem
            int rit=(m+1<=c-1)?a[maxRowIndex][m+1]:-1; // Value to the right of the mid elem
            
            // Check if the mid elem is a peak
            if((a[maxRowIndex][m]>lft) && (a[maxRowIndex][m]>rit)) return new int[]{maxRowIndex,m};
            else if (a[maxRowIndex][m]<lft) r=m-1; // Search in the left half, might have peak in that col.
            else l=m+1; // Search in the right half, might have peak in that col.
        } return new int[] {-1,-1};
    }

    private int findMaxRow(int[][] a, int r, int c, int col) {
        int maxRowIndex=-1; int maxElem=-1;
        // Check if the current elem is greater than the current max
        for(int i=0; i<r; i++){
            if((a[i][col]>maxElem)){
                maxElem=a[i][col];
                maxRowIndex=i;
            }
        }        return maxRowIndex;
    }

    public static void main(String[] args) {
        // Test cases
        FindPeakInMatrix solution = new FindPeakInMatrix();
        int[][] mat1 = {{1, 4}, {3, 2}};
        int[][] mat2 = {{10, 20, 15}, {21, 30, 14}, {7, 16, 32}};

        int[] peak1 = solution.findPeakGrid(mat1);
        System.out.println("Peak in mat1: [" + peak1[0] + ", " + peak1[1] + "]");

        int[] peak2 = solution.findPeakGrid(mat2);
        System.out.println("Peak in mat2: [" + peak2[0] + ", " + peak2[1] + "]");
    }
}

// // lc submission
// class Solution {
//     public int[] findPeakGrid(int[][] a) {
//         int r0=a.length; int c=a[0].length;
//         int l=0; int r=c-1;
//         while(l<=r){
//             int m=(l+r)/2;
//             int maxRowIndex=findMaxRow(a,r0,c,m);
//             int lft=(m-1>=0)?a[maxRowIndex][m-1]:-1;
//             int rit=(m+1<=c-1)?a[maxRowIndex][m+1]:-1;

//             if((a[maxRowIndex][m]>lft) && (a[maxRowIndex][m]>rit)) return new int[]{maxRowIndex,m};
//             else if (a[maxRowIndex][m]<lft) r=m-1;
//             else l=m+1; 
//         } return new int[] {-1,-1};
//     }

//     private int findMaxRow(int[][] a, int r, int c, int col) {
//         int maxRowIndex=-1; int maxElem=-1;
//         for(int i=0; i<r; i++){
//             if((a[i][col]>maxElem)){
//                 maxElem=a[i][col];
//                 maxRowIndex=i;
//             }
//         }        return maxRowIndex;
//     }
// }

package Binary_Search.BS_on_2D_Arrays;
/*
 * Q5
 * Median of Row Wise Sorted Matrix

Problem Statement: Given a row-wise sorted matrix of size MXN, where M is no. of rows and N is no. of columns, find the median in the given matrix.

Note: MXN is odd.

Examples
Example 1:
Input Format:M = 3, N = 3, matrix[][] =

                    1 4 9 
                    2 5 6
                    3 8 7
                    
Result: 5
Explanation:  If we find the linear sorted array, the array becomes 1 2 3 4 5 6 7 8 9. So, median = 5
Example 2:
Input Format:M = 3, N = 3, matrix[][] =

                    1 3 8 
                    2 3 4
                    1 2 5
                    
Result: 3
Explanation:  If we find the linear sorted array, the array becomes 1 1 2 2 3 3 4 5 7 8. So, median = 3
 */
public class MedianInRowSortedMatrix {

    public int median(int[][] a, int n, int m) {
        int l = Integer.MAX_VALUE; int r = Integer.MIN_VALUE;

        for (int i = 0; i < n; i++) {
            l = Math.min(l, a[i][0]);
            r = Math.max(r, a[i][m - 1]);
        }

        int need = (n * m) / 2;
        while (l <= r) {
            int mid = (l + r) / 2;
            int smallEqual = countSmallEqual(a, n, m, mid);
            if (smallEqual <= need) l = mid + 1;
            else r = mid - 1;
        }
        return l;
    }

    public static int countSmallEqual(int[][] a, int n, int m, int x) {
        int cnt = 0;
        for (int i = 0; i < n; i++) {
            cnt += upperBound(a[i], x, m);
        }
        return cnt;
    }

    public static int upperBound(int[] a, int x, int n) {
        // Basically, to find a the Least Strictly Greater no. in a[] than x
        int l=0; int r=n-1; int ub=n;//Var. Ini.
        while(l<=r){
            int m=l+(r-l)/2;
            if(a[m]<=x) l=m+1; // Narrow search range to left subspace
            else if(a[m]>x)
            {
                ub=m;// m might be ub
                r=m-1; // Try to find a new-ub < curr-ub, that is still >x
            }
        }
        return ub;
    }

    public static void main(String[] args) {
        // Test cases
        int[][] matrix1 = { { 1, 4, 9 }, { 2, 5, 6 }, { 3, 8, 7 } };
        int[][] matrix2 = { { 1, 3, 8 }, { 2, 3, 4 }, { 1, 2, 5 } };

        int n1 = 3, m1 = 3; // Dimensions of matrix1
        int n2 = 3, m2 = 3; // Dimensions of matrix2

        MedianInRowSortedMatrix obj = new MedianInRowSortedMatrix();

        // Test the median method
        System.out.println("Median of matrix1: " + obj.median(matrix1, n1, m1)); // Output: 5
        System.out.println("Median of matrix2: " + obj.median(matrix2, n2, m2)); // Output: 3
    }
    
}
