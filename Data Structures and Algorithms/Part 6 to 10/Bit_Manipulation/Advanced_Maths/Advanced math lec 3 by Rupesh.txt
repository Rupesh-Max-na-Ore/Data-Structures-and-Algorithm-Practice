import java.util.ArrayList;
import java.util.List;

/*Q1 Prime Factors
Difficulty: EasyAccuracy: 30.47%Submissions: 29K+Points: 2
Given a number N. Find its unique prime factors in increasing order.
 

Example 1:

Input: N = 100
Output: 2 5
Explanation: 2 and 5 are the unique prime
factors of 100.
Example 2:

Input: N = 35
Output: 5 7
Explanation: 5 and 7 are the unique prime
factors of 35.
 

Your Task:
You don't need to read or print anything. Your task is to complete the function AllPrimeFactors() which takes N as input parameter and returns a list of all unique prime factors of N in increasing order.

 

Expected Time Complexity: O(N)
Expected Space Complexity: O(N)
 

Constraints:
1 <= N  <= 106 */
public class PrimeFactors {
    //Optimized and explained attempt
    public int[] AllPrimeFactors(int N) {
        List<Integer> al = new ArrayList<>();
        if(N==1) return new int[]{}; //not needed, do in end anyway, but no harm as well

        // Check for the smallest prime factor 2 separately - O(1)
        if (N % 2 == 0) {
            al.add(2);
            while (N % 2 == 0) N = N/2;
        }
        
        // Check for odd prime factors from 3 onwards - O(sqrt(N)/2 * time to add to DS)
        // as checked for 2 alredy, no need to check for 4,6,8,... etc.
        for (int i = 3; i * i <= N; i += 2) {
            if (N % i == 0) {
                al.add(i);
                while (N % i == 0) {
                    N /= i;
                }
            }
        }
        
        // If N is still > 1, then it is a prime factor
        if (N > 1) al.add(N);
        
        // Convert the list to an array
        int[] ans = new int[al.size()];
        for (int i = 0; i < al.size(); i++) {
            ans[i] = al.get(i);
        }
        
        return ans;
    }
    // //FIrst Attempt, debug and learn from some mistakes, works
    // public int[] AllPrimeFactors(int N)
    // {
    //     if(N==1) return new int[]{};
    //     List<Integer> al = new ArrayList<>();
    //     for(int i = 2; i*i <= N; i=i+1){
    //         //System.out.println("Loop i: "+i);
    //         if(N%i==0){
    //             //System.out.println("ENter if CUrr i: "+i);
    //             al.add(i);
    //             //if(N/i != i) al.add(N/i);
    //             while(N%i==0) N=N/i;
    //             if(N==1) {
    //                 // Convert the list to an array
    //                 int[] a = new int[al.size()];
    //                 for (int j = 0; j < al.size(); j++) {
    //                 a[j] = al.get(j);
    //                 }
        
    //                 return a;
    //             }
    //         }
    //     }
    //     if(N>1) al.add(N);
    //     if(al.isEmpty() ) return new int[]{N};
    //     //if(N==1) {
    //             // Convert the list to an array
    //             int[] a = new int[al.size()];
    //             for (int j = 0; j < al.size(); j++) {
    //             a[j] = al.get(j);
    //             }
    
    //             return a;
    //         //}
    //     //return new int[]{};
    // }
    public static void main(String[] args) {
        PrimeFactors pf = new PrimeFactors();

        // Test case 1: N = 100
        int[] result1 = pf.AllPrimeFactors(100);
        System.out.print("Prime factors of 100: ");
        for (int i : result1) {
            System.out.print(i + " ");
        }
        System.out.println();

        // Test case 2: N = 35
        int[] result2 = pf.AllPrimeFactors(35);
        System.out.print("Prime factors of 35: ");
        for (int i : result2) {
            System.out.print(i + " ");
        }
        System.out.println();

        // Test case 3: N = 17 (a prime number)
        int[] result3 = pf.AllPrimeFactors(17);
        System.out.print("Prime factors of 17: ");
        for (int i : result3) {
            System.out.print(i + " ");
        }
        System.out.println();

        // Test case 4: N = 1 (edge case)
        int[] result4 = pf.AllPrimeFactors(1);
        System.out.print("Prime factors of 1: ");
        for (int i : result4) {
            System.out.print(i + " ");
        }
        System.out.println();

        // Test case 5: N = 2 (smallest prime number)
        int[] result5 = pf.AllPrimeFactors(2);
        System.out.print("Prime factors of 2: ");
        for (int i : result5) {
            System.out.print(i + " ");
        }
        System.out.println();
    }
}
/*Q2 All divisors of a Number
Difficulty: EasyAccuracy: 46.73%Submissions: 19K+Points: 2
Given an integer N, print all the divisors of N in the ascending order.
 

Example 1:

Input : 20
Output: 1 2 4 5 10 20
Explanation: 20 is completely 
divisible by 1, 2, 4, 5, 10 and 20.

Example 2:

Input: 21191
Output: 1 21191
Explanation: As 21191 is a prime number,
it has only 2 factors(1 and the number itself).

Your Task:

Your task is to complete the function print_divisors() which takes N as input parameter and prints all the factors of N as space seperated integers in sorted order. You don't have to print any new line after printing the desired output. It will be handled in driver code.
 

Expected Time Complexity: O(sqrt(N))
Expected Space Complexity: O(sqrt(N))
 

Constraints:
1 <= N <= 105

 */

import java.util.TreeSet;

public class Divisors {
    public static void print_divisors(int n) {
        TreeSet<Integer> ans = new TreeSet<>();
        for(int i=1; i*i <=n ; i++){
            if(n%i == 0){
                System.out.println("Wow");
                System.out.print(i+" ");
                if(n/i != i){
                    System.out.println(" hmm");
                    ans.add(n/i);
                }
            }
            // if(n/i != i){
            //     System.out.println(" hmm");
            //     ans.add(n/i);
            // }
        }
        // Integer[] a = ans.toArray(new Integer[0]);
        // for(int i = 0; i< a.length; i++){
        //     if(i== a.length - 1) System.out.print(a[i]);
        //     else System.out.println(a[i]+" ");
        // }
        for(Integer i: ans){
            System.out.println(i+" ");
        }
    }
    public static void main(String[] args) {
        print_divisors(20); // Example test case 1
        System.out.println();
        //print_divisors(21191); // Example test case 2
    }
}
/*Q3 204. Count Primes
Medium
Topics
Companies
Hint
Given an integer n, return the number of prime numbers that are strictly less than n.

 

Example 1:

Input: n = 10
Output: 4
Explanation: There are 4 prime numbers less than 10, they are 2, 3, 5, 7.
Example 2:

Input: n = 0
Output: 0
Example 3:

Input: n = 1
Output: 0
 

Constraints:

0 <= n <= 5 * 106
Seen this question in a real interview before?
1/5
Yes
No
Accepted
878.6K
Submissions
2.6M
Acceptance Rate
33.7% */
public class PrimesUsingSOE {
    public static int countPrimes(int n) {
        // calcs. #primes till n-1 ie under n 
        if(n==0||n==1) return 0; //edge case
        int cnt=n-2;//-1 for i=1 and 0 and for n
        // assume all prime at first
        int preComp[] = new int[n+1]; //to store if i is prime or not
        for(int i=0; i<=n-1; i++) preComp[i]=1;

        for(int i=2;i*i<=n-1;i++){
            if(preComp[i]==1){//if i is prime, all multiples of i not prime
                //System.out.println("Prime counted = "+i);
                for(int j=(i*i); j<=n-1;j=j+i){
                    // start from i*i cuz all below are this are taken by primes multiples below i
                    if(preComp[j]==1) // cut only if not already cut
                    {
                        preComp[j]=0;
                        cnt--; // decrement no. of primes
                        //System.out.println(" So, cutting now = "+j);
                    }
                    //System.out.println(" So, cutting = "+j);
                }
            }
        } return cnt;
    }
    public static void main(String[] args) {
        int primes = countPrimes(10); // Example test case 1
        System.out.println(primes);
        System.out.println(countPrimes(30));
    }
}
/*//optimal soln from lc forum
public int countPrimes(int n) {
        if(n <= 2) return 0;
        int ans = 1;// don't forget to record 2. :-)
        boolean[] isCompositeArr = new boolean[n];
        int upper = (int) Math.sqrt(n);
        for(int i = 3;i < n;i=i+2){//1.scan only odd number
            if(isCompositeArr[i]) continue;
            ans++;
            if(i > upper) continue;//2. avoid i^2 overflow.
            for(int j = i*i; j < n;j = j + 2*i){//3. initialize j to i^2
                                                //4. increase 2i to keep j as an odd number
                
                isCompositeArr[j] = true;
            }
        }
        return ans;
    } */ //Explanation- https://leetcode.com/problems/count-primes/solutions/3524353/explanation-of-why-sqrt-n-i-i-and-2-i/

    /*// implement optimal way myself
    class Solution {
    public int countPrimes(int n) {
        boolean a[]=new boolean[n];
       if(n<3) return 0;
        int cnt=n/2;
        for(int i=3;i*i<=n;i+=2)
        {
            if(a[i]==false)
            {
                for(int j=i*i;j<n;j+=2*i)
                {
                    if(!a[j]){
                    cnt--;
                    a[j]=true;
                    }
                }
            }
        }
        return cnt;
    }
} */
/*Q4 Prime Factorization using Sieve
Difficulty: MediumAccuracy: 41.03%Submissions: 9K+Points: 4
You are given a positive number N. Using the concept of Sieve, compute its prime factorisation.

Example:

Input: 
N = 12246
Output: 
2 3 13 157
Explanation: 
2*3*13*157 = 12246 = N.
Your Task:

Comple the function findPrimeFactors(), which takes a positive number N as input and returns a vector consisting of prime factors. You should implement Sieve algorithm to solve this problem.

 

Expected Time Complexity: O(Nlog(log(N)).

Expected Auxiliary Space: O(N).

Constraints:

1<=N<=2*105 */

import java.util.ArrayList;
import java.util.List;

public class SieveOfEratoshthenes {
        // You must implement this function
    static void sieve() {}

    static List<Integer> findPrimeFactors(int N) {
        List<Integer> ans = new ArrayList<>();
        int[] prime = new int[N + 1];
        mySieveOfErathosthenes(prime, N);

        while (N != 1) {
            ans.add(prime[N]);
            N = N / prime[N];
        }
        return ans;        
    }

    private static void mySieveOfErathosthenes(int[] prime, int n) {
        for (int i = 1; i <= n; i++) prime[i] = i;
        for (int i = 2; i * i <= n; i++) {
            if (prime[i] == i) {
                for (int j = i * i; j <= n; j += i) {
                    if (prime[j] == j)
                        prime[j] = i;
                }
            }
        }
    }
}
/*Q5 204. Count Primes
Solved
Medium
Topics
Companies
Hint
Given an integer n, return the number of prime numbers that are strictly less than n.

 

Example 1:

Input: n = 10
Output: 4
Explanation: There are 4 prime numbers less than 10, they are 2, 3, 5, 7.
Example 2:

Input: n = 0
Output: 0
Example 3:

Input: n = 1
Output: 0
 

Constraints:

0 <= n <= 5 * 106
Seen this question in a real interview before?
1/5
Yes
No
Accepted
878.7K
Submissions
2.6M
Acceptance Rate
33.7%
 */
public class power {
    //My Iterative soln.
    public double myPow(double x, int n) {
        int sign=1;
        if (x==1) return x;
        if (x==0) return 0;
        if (n==0) return 1;
        if (n<0) sign =-1;
        int absPow= sign*n; 
        double mag=1;
        while(absPow!=0){
            if(absPow%2==0)//even n
            {
                x=x*x;
                absPow=(absPow >>> 1); // == absPow/2; //TLE if use this
            }else{//odd n
                mag = mag*x;
                absPow = absPow-1; // == (absPow&(absPow-1)); // unset least significant set bit
            }
        }
        return (sign==-1)? (1/mag):mag;
    }
}
/*//My recursive soln.
class Solution {
    public double myPow(double x, int n) {
        int sign=1;
        if (n<0) sign =-1;
        double magnitude=recurPow(x,(long)sign*n,1);
        double ans = (sign==1)?magnitude:(1/magnitude)  ;
        return ans;
    }
        private double recurPow(double x, long n, double ans) {
        //Base
        if(n==0) return ans;
        //Recursive case
        if(n%2==0){
            return recurPow(x*x, n/2, ans);
        }
        else{
            return recurPow(x, n-1, ans*x);
        }
    }

} */

