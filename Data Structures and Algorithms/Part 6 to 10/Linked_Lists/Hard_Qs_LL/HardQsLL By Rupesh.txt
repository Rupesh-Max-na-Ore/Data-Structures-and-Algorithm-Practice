/*Q1 25. Reverse Nodes in k-Group
Solved
Hard
Topics
Companies
Given the head of a linked list, reverse the nodes of the list k at a time, and return the modified list.

k is a positive integer and is less than or equal to the length of the linked list. If the number of nodes is not a multiple of k then left-out nodes, in the end, should remain as it is.

You may not alter the values in the list's nodes, only nodes themselves may be changed.

 

Example 1:


Input: head = [1,2,3,4,5], k = 2
Output: [2,1,4,3,5]
Example 2:


Input: head = [1,2,3,4,5], k = 3
Output: [3,2,1,4,5]
 

Constraints:

The number of nodes in the list is n.
1 <= k <= n <= 5000
0 <= Node.val <= 1000
 

Follow-up: Can you solve the problem in O(1) extra memory space?

Seen this question in a real interview before?
1/5
Yes
No
Accepted
937.9K
Submissions
1.6M
Acceptance Rate
59.0% */
package Linked_Lists.Hard_Qs_LL;
//q1
import Linked_Lists.Singly_Linked_List.LinkedList.Node;

public class ReverseKsizeGrps {
    public Node reverseKGroup(Node h, int k) {
        if(h==null||h.next==null||k==1) return h;

        Node t=h; Node kNode=null; Node ptNode=null; Node akN=h;
        while(t!=null){
            // find kth node, put in kNode
            int cnt=k; kNode=t;
            while(kNode!=null && cnt>1){
                kNode=kNode.next;
                cnt--;
            }
            if(kNode==null){
                if(ptNode!=null) ptNode.next=t;
                break;
            }
            // store in akn next of that, for next t
            akN=kNode.next;
            System.out.println("akn now: ");
            printList(akN);
            kNode.next=null;
            System.out.println("t start: ");
            printList(t);

            reverseSLL(t);
            System.out.println("t rev now: ");

            printList(t);
            if(t==h){
                System.out.println("kNode h: ");

                printList(kNode);
                h=kNode;
            } else{
                System.out.println("kNode pt: ");
                printList(kNode);
                ptNode.next=kNode;
            }
            ptNode=t;
            //akN=t; //by mistake
            t=akN;
        } return h;
    }
    public Node reverseSLL(Node h){
        if(h==null||h.next==null) return h;

        Node Pt=null;
        Node t=h;
        Node Ft=h.next;

        while(t!=null){
            t.next=Pt;
            Pt=t;
            t=Ft;
            if(Ft==null) h=t;
            else Ft = Ft.next;
        }
        System.out.println("new h in rev fn: ");

        printList(Pt);
        return Pt;
    }
    // Helper function to print the linked list
    public static void printList(Node head) {
        Node temp = head;
        while (temp != null) {
            System.out.print(temp.value + " -> ");
            temp = temp.next;
        }
        System.out.println("null");
    }

    public static void main(String[] args) {
        // Create the linked list: 1 -> 2 -> 3 -> 4 -> 5
        Node head = new Node(1);
        head.next = new Node(2);
        head.next.next = new Node(3);
        head.next.next.next = new Node(4);
        head.next.next.next.next = new Node(5);

        System.out.println("Original List:");
        printList(head);

        ReverseKsizeGrps solution = new ReverseKsizeGrps();
        int k = 2; // Set the value of k

        Node newHead = solution.reverseKGroup(head, k);

        System.out.println("Reversed List in k-groups:");
        printList(newHead);
    }
    // first attempt, some wrongs
    // public Node reverseKGroup(Node h, int k) {
    //     if(h==null||h.next==null||k==1) return h;

    //     Node t=h; Node kNode=null; Node ptNode=null; Node akN=h;
    //     while(kNode!=null){
    //         // find kth node, put in kNode
    //         int cnt=k; kNode=t;
    //         while(kNode!=null && cnt>1){
    //             kNode=kNode.next;
    //             cnt--;
    //         }
    //         if(kNode==null){
    //             if(ptNode!=null) ptNode.next=t;
    //         }
    //         // store in akn next of that, for next t
    //         akN=kNode.next;
    //         if(t==h){
    //             //h=kNode;
    //             kNode.next=null;
    //             ptNode=t;
    //             t=reverseSLL(t);
    //             h=t;
    //         } else{
    //             kNode.next=null;
    //             //ptNode
    //             ptNode=t;
    //             t=reverseSLL(t);
    //         }
    //         //akN=t;
    //         t=akN;
    //     } return h;
    // }
    // public Node reverseSLL(Node h){
    //     if(h==null||h.next==null) return h;

    //     Node Pt=null;
    //     Node t=h;
    //     Node Ft=h.next;

    //     while(t!=null){
    //         t.next=Pt;
    //         Pt=t;
    //         t=Ft;
    //         if(Ft==null) h=t;
    //         else Ft = Ft.next;
    //     }
    //     return Pt;
    // }
}
/*
 * package Linked_Lists.Hard_Qs_LL;

import Linked_Lists.Singly_Linked_List.LinkedList.Node;
// Another way to write, more readable, use of dummy node
public class ReverseKsizeGrps2 {
    public Node reverseKGroup(Node h, int k) {
        if (h == null || h.next == null || k == 1) return h;

        Node dummy = new Node(0);
        dummy.next = h;
        Node prevGroupEnd = dummy;

        while (true) {
            Node groupStart = prevGroupEnd.next;
            Node kthNode = groupStart;

            // Find the k-th node
            for (int i = 1; i < k && kthNode != null; i++) {
                kthNode = kthNode.next;
            }

            if (kthNode == null) break; // Not enough nodes to reverse

            Node nextGroupStart = kthNode.next;
            kthNode.next = null;

            // Reverse the group
            Node newGroupStart = reverseSLL(groupStart);

            // Connect the previous group to the newly reversed group
            prevGroupEnd.next = newGroupStart;
            groupStart.next = nextGroupStart;

            // Move prevGroupEnd to the end of the reversed group
            prevGroupEnd = groupStart;
        }

        return dummy.next;
    }

    public Node reverseSLL(Node h) {
        Node prev = null;
        Node curr = h;
        while (curr != null) {
            Node next = curr.next;
            curr.next = prev;
            prev = curr;
            curr = next;
        }
        return prev;
    }
}

 */
package Linked_Lists.Hard_Qs_LL;

import Linked_Lists.Singly_Linked_List.LinkedList.Node;
/*Q2 Rotate a Linked List
In this article, we will solve the problem: "Rotate a Linked List"

Problem Statement: Given the head of a linked list, rotate the list to the right by k places.

Examples:

Example 1:
Input:
	head = [1,2,3,4,5] 
	k = 2
Output:
 head = [4,5,1,2,3]
Explanation:
 We have to rotate the list to the right twice.


Example 2:
Input:
	head = [1,2,3]
	k = 4
Output:
head = [3,1,2]
Explanation:

 */
public class RotateRightSLL {
    //@SuppressWarnings("null")
    public Node rotateRight(Node h, int k) {
        if(h==null||h.next==null||k==0) return h;
        //Calc len of LL, find tail too while at it
        int n=1;
        Node endOfLL=h;
        while(endOfLL.next!=null) {
            n++;
            endOfLL=endOfLL.next;
        }
        k=k%n;
        if(k==0) return h;
        // Find kth node from end, for new head
        int goTill=n-k;
        int gone=1; Node t=h;
        while (gone<goTill){
            gone++;
            t=t.next;
        }
        Node newHead= t.next; //n-k+1 th node is new head
        t.next=null; //disconnect k-1th node from end
        endOfLL.next=h; //coneect  to head
        return newHead;

    }

}

package Linked_Lists.Hard_Qs_LL;
/*Q3 Flattening a Linked List
MediumAccuracy: 51.53%Submissions: 142K+Points: 4
Given a Linked List of size N, where every node represents a sub-linked-list and contains two pointers:
(i) a next pointer to the next node,
(ii) a bottom pointer to a linked list where this node is head.
Each of the sub-linked-list is in sorted order.
Flatten the Link List such that all the nodes appear in a single level while maintaining the sorted order. 

Note: The flattened list will be printed using the bottom pointer instead of the next pointer.
For more clarity have a look at the printList() function in the driver code.

 

Example 1:

Input:
5 -> 10 -> 19 -> 28
|     |     |     | 
7     20    22   35
|           |     | 
8          50    40
|                 | 
30               45
Output:  5-> 7-> 8- > 10 -> 19-> 20->
22-> 28-> 30-> 35-> 40-> 45-> 50.
Explanation:
The resultant linked lists has every 
node in a single level.
(Note: | represents the bottom pointer.)
 

Example 2:

Input:
5 -> 10 -> 19 -> 28
|          |                
7          22   
|          |                 
8          50 
|                           
30              
Output: 5->7->8->10->19->22->28->30->50
Explanation:
The resultant linked lists has every
node in a single level.

(Note: | represents the bottom pointer.)
 

Your Task:
You do not need to read input or print anything. Complete the function flatten() that takes the head of the linked list as input parameter and returns the head of flattened link list.

Expected Time Complexity: O(N*N*M)
Expected Auxiliary Space: O(N)

Constraints:
0 <= N <= 50
1 <= Mi <= 20
1 <= Element of linked list <= 103 */
//Node class  used in the program
class Node
{
	int data;
	Node next;
	Node bottom;
	
	Node(int d)
	{
		data = d;
		next = null;
		bottom = null;
	}
}

/*  Function which returns the  root of 
    the flattened linked list. */
public class FlatteningLLs {
    Node flatten(Node h)
    {
        if(h==null||h.next==null) return h;
        Node mergeW= flatten(h.next);

        return VerticalMerge(h,mergeW);
    }

    private Node VerticalMerge(Node l1, Node l2) {
        Node dn = new Node(-1);
        Node ml = dn;
        while(l1!=null && l2!=null){
            if(l1.data<l2.data){
                ml.bottom=l1; //link correct node to merged list's next position 
                ml=l1; //== ml=ml.bottom // update fpr next correct placing during next iteration
                l1=l1.bottom; // same reason, for next comparision
            } else{
                ml.bottom=l2;
                ml=l2;
                l2=l2.bottom;
            }
            ml.next=null; // always, leave noting connected to next, cuz forming vertical LL
// above line is not required for most nodes, but the head, cuz each node.next except head.next is already null
        }
        if(l1!=null) ml.bottom=l1;
        if(l2!=null) ml.bottom=l2;
        return dn.bottom;
    }

}
package Linked_Lists.Hard_Qs_LL;
/*Q4 Clone Linked List with Random and Next Pointer

Problem Statement: Given a linked list where every node in the linked list contains two pointers:

‘next’ which points to the next node in the list.
‘random’ which points to a random node in the list or ‘null’.
Create a ‘deep copy’ of the given linked list and return it.

138. Copy List with Random Pointer
Medium
Topics
Companies
Hint
A linked list of length n is given such that each node contains an additional random pointer, which could point to any node in the list, or null.

Construct a deep copy of the list. The deep copy should consist of exactly n brand new nodes, where each new node has its value set to the value of its corresponding original node. Both the next and random pointer of the new nodes should point to new nodes in the copied list such that the pointers in the original list and copied list represent the same list state. None of the pointers in the new list should point to nodes in the original list.

For example, if there are two nodes X and Y in the original list, where X.random --> Y, then for the corresponding two nodes x and y in the copied list, x.random --> y.

Return the head of the copied linked list.

The linked list is represented in the input/output as a list of n nodes. Each node is represented as a pair of [val, random_index] where:

val: an integer representing Node.val
random_index: the index of the node (range from 0 to n-1) that the random pointer points to, or null if it does not point to any node.
Your code will only be given the head of the original linked list.

 

Example 1:


Input: head = [[7,null],[13,0],[11,4],[10,2],[1,0]]
Output: [[7,null],[13,0],[11,4],[10,2],[1,0]]
Example 2:


Input: head = [[1,1],[2,1]]
Output: [[1,1],[2,1]]
Example 3:



Input: head = [[3,null],[3,0],[3,null]]
Output: [[3,null],[3,0],[3,null]]
 

Constraints:

0 <= n <= 1000
-104 <= Node.val <= 104
Node.random is null or is pointing to some node in the linked list.
Seen this question in a real interview before?
1/5
Yes
No
Accepted
1.3M
Submissions
2.2M
Acceptance Rate
56.5%
Explanation:  A deep copy of the linked list has to be created while maintaining all ‘next’ and ‘random’ pointers to the appropriate new nodes. Additional memory allocation is done while creating a duplicate set of nodes and managing their pointer relationships. */
class Node {
    int val;
    Node next;
    Node random;

    public Node(int val) {
        this.val = val;
        this.next = null;
        this.random = null;
    }
}
public class CloneLLWithRandomAndNext {
    public Node copyRandomList(Node h) {
        if(h==null) return null;
        insertCopyNodes(h);
        connectRandoms(h);
        return DeepCopier(h);
    }

    private Node DeepCopier(Node h) {
        //to separate copy LL and OG LL
        Node dmyNode=new Node(-1);//note LL of copy nodes
        Node z=dmyNode;//ptr to collect all copy nodes
        Node t=h;
        while(t!=null){
            Node copy=t.next;
            z.next=copy;//collect copy node to dummy
            z=z.next;//increment z for next collection
            t.next=t.next.next;//connect curent og node to nest og node

            //keep traversing og nodes
            t=t.next;
        } return dmyNode.next;
    }

    private void connectRandoms(Node h) {
        Node t=h;
        while(t!=null){
            //retreieve copy
            Node copy=t.next;
            //copy random point to the node's copy that og node's random is pointing to
            if(t.random!= null) copy.random=t.random.next; 
            //t.random.next== the node's copy that og node's random is pointing to
            else copy.random=null;
            //keep traversing to og nodes
            t=t.next.next;//==copy.next;
        }
    }

    private void insertCopyNodes(Node h) {
        Node t=h;
        while(t!=null){
            //create new node
            Node newCopy=new Node(t.val);
            //connect copy's next to OG's next
            newCopy.next=t.next;
            //connect og's next to copy
            t.next=newCopy;
            //keep traversing
            t=t.next.next; //== newCopy.next;
        }
    }
    
}
