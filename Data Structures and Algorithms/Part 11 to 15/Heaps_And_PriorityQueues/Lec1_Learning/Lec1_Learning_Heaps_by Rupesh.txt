package Heaps_And_PriorityQueues.Lec1_Learning;
/*Q1 */
public class Q1_Implementation_of_Priority_Queue_using_Binary_Heap {
    
}
// //{ Driver Code Starts
// //Initial Template for Java

// import java.util.*;
// import java.lang.*;
// import java.io.*;

// class GFG{
//     public static int H[]=new int[10009];
//     public static int s=-1;
    
//     public int parent(int i){
//         return (i-1)/2;
        
//     }
//     public int leftChild(int i){
//         return ((2*i)+1);
//     }
//     public int rightChild(int i){
//         return ((2*i)+2);
//     }
//     public void shiftUp(int i){
//         while(i>0 && H[parent(i)] < H[i]){
//             int temp=H[i];
//             H[i]=H[parent(i)];
//             H[parent(i)]=temp;
//             i=parent(i);
//         }
//     }
    
//     public void shiftDown(int i){
//         int maxIndex=i;
//         int l=leftChild(i);
//         if(l<=s && H[l]>H[maxIndex] ){
//             maxIndex=l;
//         }
//         int r=rightChild(i);
        
//         if(r<=s && H[r]>H[maxIndex] ){
//             maxIndex=r;
//         }
//         if(i!=maxIndex){
//             int temp=H[i];
//             H[i]=H[maxIndex];
//             H[maxIndex]=temp;
//             shiftDown(maxIndex);
//         }
//     }
    
//     public void insert(int p){
//         s=s+1;
//         H[s]=p;
//         shiftUp(s);
//     }

//     public static void main(String args[]) throws IOException{
//         Scanner sc=new Scanner(System.in);
//         GFG ob=new GFG();
//         int t=sc.nextInt();
//         while(t-->0){
//             int N=sc.nextInt();
//             for(int i=0;i<N;i++){
//                 int k=sc.nextInt();
//                 ob.insert(k);
//             }
            
//             Solution obj=new Solution();
//             System.out.println("Node with maximum priority : "+ obj.extractMax());
//             System.out.print("Priority queue after extracting maximum : ");
//             int j=0;
//             while(j<=ob.s){
//                 System.out.print(ob.H[j]+" ");
//                 j++;
//             }
//             System.out.println();
//         }
//     }
// }
// // } Driver Code Ends


// //User function Template for Java

// //  public static int H[]=new int[10009];
// //  public static int s=-1;
// // 1. parent(i): Function to return the parent node of node i
// // 2. leftChild(i): Function to return index of the left child of node i
// // 3. rightChild(i): Function to return index of the right child of node i
// // 4. shiftUp(int i): Function to shift up the node in order to maintain the
// // heap property
// // 5. shiftDown(int i): Function to shift down the node in order to maintain the
// // heap property.
// // int s=-1, current index value of the array H[].

// // You have to make a class of GFG to access the above functionalities like this - GFG obj=new GFG();
// // You can check the driver code for better understanding.
// class Solution {
//   //gfg submission
//   public int extractMax() {
//         GFG obj=new GFG();
//         int maxRightNow= obj.H[0];
//         obj.H[0]=obj.H[obj.s];
//         obj.s--;
//         obj.shiftDown(0);
//         return maxRightNow;
//     }
// };

package Heaps_And_PriorityQueues.Lec1_Learning;

public class Q2_Binary_Heap_Operations {
    
}
//First attempt TLE
// // User function Template for Java


// class MinHeap {
//     int[] harr;
//     int capacity;
//     int heap_size;
//     MinHeap(int cap) {
//         heap_size = 0;
//         capacity = cap;
//         harr = new int[cap];
//     }
//     int parent(int i) { return (i - 1) / 2; }
//     int left(int i) { return (2 * i + 1); }
//     int right(int i) { return (2 * i + 2); }

//     //Function to extract minimum value in heap and then to store 
//     //next minimum value at first index.
//     int extractMin()
//     {
//         if(heap_size==0) return -1;
//         int minRightNow= harr[0];//top elem == min in minHeap
//         //below block of if not required, just there to avoid more fn calls
//         if (heap_size == 1) {
//         heap_size--;
//         return harr[0];
//         }
//         harr[0]=harr[heap_size-1];//put last elem in top
//         heap_size--;//reduce size of heap by 1
//         MinHeapify(0);//percolate down now top elem to correct place
//         return minRightNow;
//     }

//     //Function to insert a value in Heap.
//     void insertKey(int k) 
//     {
//         int i;
//         if(heap_size==capacity) return; //can't insert
//         heap_size++;// to accomodate new elem k
//         i=heap_size-1;//last elem indx in i
//         //percolate up by replacing parents repeatedly until heap prop. gets satisfied
//         while(i>=0 && k>harr[parent(i)]){
//             //swap parent and curr child i
//             harr[i]= harr[parent(i)];
//             i=parent(i); // curr parent is the next itr child
//         }
//         //finally place k when loop ends, we are at the place apt for new elem placement
//         harr[i]=k;
//     }

//     //Function to delete a key at ith index.
//     void deleteKey(int i) 
//     {
//         if(i>=heap_size) return; //can't delete as ith elem not exist yet, so, do nothing
//         //below block works but takes time
//         // //int toDelete=harr[i];
//         // harr[i]=harr[heap_size-1];//replace ith elem w/ last elem
//         // heap_size--;//reduce size of heap
//         // MinHeapify(i);//percolate down replaced elem
//         decreaseKey(i, Integer.MIN_VALUE);
//         extractMin();
//     }

//     //Function to change value at ith index and store that value at first index.
//     void decreaseKey(int i, int new_val) 
//     {
//         harr[i] = new_val;
//         while (i != 0 && harr[parent(i)] > harr[i]) {
//             int temp = harr[i];
//             harr[i] = harr[parent(i)];
//             harr[parent(i)] = temp;
//             i = parent(i);
//         }
//     }

//     /* You may call below MinHeapify function in
//       above codes. Please do not delete this code
//       if you are not writing your own MinHeapify */
//     void MinHeapify(int i) {
//         int l = left(i);
//         int r = right(i);
//         int smallest = i;
//         if (l < heap_size && harr[l] < harr[i]) smallest = l;
//         if (r < heap_size && harr[r] < harr[smallest]) smallest = r;
//         if (smallest != i) {
//             int temp = harr[i];
//             harr[i] = harr[smallest];
//             harr[smallest] = temp;
//             MinHeapify(smallest);
//         }
//     }
// }

/*//passed
class MinHeap {
    int[] harr;
    int capacity;
    int heap_size;
    MinHeap(int cap) {
        heap_size = 0;
        capacity = cap;
        harr = new int[cap];
    }
    int parent(int i) { return (i - 1) / 2; }
    int left(int i) { return (2 * i + 1); }
    int right(int i) { return (2 * i + 2); }


    //Function to extract minimum value in heap and then to store 
    //next minimum value at first index.
    int extractMin() {
    if (heap_size == 0)
        return -1; // or throw an exception
    if (heap_size == 1) {
        heap_size--;
        return harr[0];
    }

    int root = harr[0];
    harr[0] = harr[heap_size - 1];
    heap_size--;
    MinHeapify(0);
    return root;
}


    //Function to insert a value in Heap.
    void insertKey(int k) {
    if (heap_size == capacity)
        return; // or throw an exception
    heap_size++;
    int i = heap_size - 1;
    harr[i] = k;
    while (i != 0 && harr[parent(i)] > harr[i]) {
        int temp = harr[i];
        harr[i] = harr[parent(i)];
        harr[parent(i)] = temp;
        i = parent(i);
    }
}


    void deleteKey(int i) {
    if (i < 0 || i >= heap_size)
        return; // or throw an exception
    decreaseKey(i, Integer.MIN_VALUE);
    extractMin();
}



    //Function to change value at ith index and store that value at first index.
    void decreaseKey(int i, int new_val) 
    {
        harr[i] = new_val;
        while (i != 0 && harr[parent(i)] > harr[i]) {
            int temp = harr[i];
            harr[i] = harr[parent(i)];
            harr[parent(i)] = temp;
            i = parent(i);
        }
    }

    // You may call below MinHeapify function in
    //   above codes. Please do not delete this code
    //   if you are not writing your own MinHeapify 
      void MinHeapify(int i) {
        int l = left(i);
        int r = right(i);
        int smallest = i;
        if (l < heap_size && harr[l] < harr[i]) smallest = l;
        if (r < heap_size && harr[r] < harr[smallest]) smallest = r;
        if (smallest != i) {
            int temp = harr[i];
            harr[i] = harr[smallest];
            harr[smallest] = temp;
            MinHeapify(smallest);
        }
    }
}

*/

package Heaps_And_PriorityQueues.Lec1_Learning;
/*Q3 */
public class Q3_Does_array_represent_Heap {
    public boolean countSub(long a[], long n)
    {
        for(int i=0;i<n;i++){
           int left=2*i+1;
           int right=2*i+2;
           if(left <n && a[i]<a[left]) return false;
           if(right <n && a[i]< a[right]) return false;
        }
        return true;
    }
}

package Heaps_And_PriorityQueues.Lec1_Learning;

public class Q4_Convert_Min_Heap_to_Max_Heap {
    static void convertMinToMaxHeap(int N, int A[]) {
        // it is same as converting any random array to max heap
        // Start from the last internal, non-leaf node and move up
            for (int i = (N / 2) - 1; i >= 0; i--) {
                // heapify on each internal, non-leaf node
                maxHeapify(A, N, i);
            }
        }
        static void maxHeapify(int[] A, int N, int indx) {
            int largest = indx; // Ini. largest as the curr node
            int L = 2 * indx + 1; 
            int R = 2 * indx + 2; 
    
            if (L < N && A[L] > A[largest]) largest = L;
            if (R < N && A[R] > A[largest]) largest = R;
    
            // If the largest elem is not the curr node, swap them and recursively heapify the affected subtree
            if (largest != indx) {
                int temp = A[indx];
                A[indx] = A[largest];
                A[largest] = temp;
                maxHeapify(A, N, largest);
            }
        }
}

