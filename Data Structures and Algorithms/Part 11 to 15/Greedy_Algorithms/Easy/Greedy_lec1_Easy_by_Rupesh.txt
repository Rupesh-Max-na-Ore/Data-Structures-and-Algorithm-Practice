package Greedy_Algorithms.Easy;

import java.util.Arrays;

/*Q1 455. Assign Cookies
Easy
Topics
Companies
Assume you are an awesome parent and want to give your children some cookies. But, you should give each child at most one cookie.

Each child i has a greed factor g[i], which is the minimum size of a cookie that the child will be content with; and each cookie j has a size s[j]. If s[j] >= g[i], we can assign the cookie j to the child i, and the child i will be content. Your goal is to maximize the number of your content children and output the maximum number.

 

Example 1:

Input: g = [1,2,3], s = [1,1]
Output: 1
Explanation: You have 3 children and 2 cookies. The greed factors of 3 children are 1, 2, 3. 
And even though you have 2 cookies, since their size is both 1, you could only make the child whose greed factor is 1 content.
You need to output 1.
Example 2:

Input: g = [1,2], s = [1,2,3]
Output: 2
Explanation: You have 2 children and 3 cookies. The greed factors of 2 children are 1, 2. 
You have 3 cookies and their sizes are big enough to gratify all of the children, 
You need to output 2.
 

Constraints:

1 <= g.length <= 3 * 104
0 <= s.length <= 3 * 104
1 <= g[i], s[j] <= 231 - 1
Accepted
479.1K
Submissions
907K
Acceptance Rate
52.8% */
public class Assign_Cookies {
    public int findContentChildren(int[] g, int[] s) {
        Arrays.sort(g);
        Arrays.sort(s);
        int l=0,r=0;
        while(r<s.length && l<g.length){
            if(g[l]<=s[r]) l++; //gib it cookie
            r++;//see if next cookie can stisfy rth child's greed
        }
        return l;//==#child satisfied
    }
}
package Greedy_Algorithms.Easy;

import java.util.PriorityQueue;

/*Q2 Fractional Knapsack
Difficulty: MediumAccuracy: 32.46%Submissions: 254K+Points: 4
Given weights and values of n items, we need to put these items in a knapsack of capacity w to get the maximum total value in the knapsack. Return a double value representing the maximum value in knapsack.
Note: Unlike 0/1 knapsack, you are allowed to break the item here. The details of structure/class is defined in the comments above the given function.

Examples :

Input: n = 3, w = 50, value[] = [60,100,120], weight[] = [10,20,30]
Output: 240.000000
Explanation: Take the item with value 60 and weight 10, value 100 and weight 20 and split the third item with value 120 and weight 30, to fit it into weight 20. so it becomes (120/30)*20=80, so the total value becomes 60+100+80.0=240.0 Thus, total maximum value of item we can have is 240.00 from the given capacity of sack. 
Input: n = 2, w = 50, value[] = [60,100], weight[] = [10,20]
Output: 160.000000
Explanation: Take both the items completely, without breaking. Total maximum value of item we can have is 160.00 from the given capacity of sack.
Expected Time Complexity : O(n log n)
Expected Auxilliary Space: O(1)

Constraints:
1 <= n <= 105
1 <= w <= 109
1 <= valuei, weighti <= 104 */
public class Fractional_Knapsack {
    /*
class Item {
    int value, weight;
    Item(int x, int y){
        this.value = x;
        this.weight = y;
    }
}
*/
    // Correct logic, wrong data types and comparator, below
    // Function to get the maximum total value in the knapsack.
    double fractionalKnapsack(int w, Item arr[], int n) {
        // Your code here
        int rate[][]=new int[n][3];
        for(int i=0; i<n;i++){
            rate[i][0]=arr[i].value/arr[i].weight;// this should be double actually, to not loose fractional vals.
            rate[i][1]=arr[i].value;
            rate[i][2]=arr[i].weight;
        }
        PriorityQueue<Integer[]> maxH=new PriorityQueue<>((a,b)->b[0]-a[0]);
        for(int i=0;i<n;i++){
            maxH.offer(rate[i]);
        }
        int maxV=0;// should be double
        while(w!=0){
            int[] currItem=maxH.poll();// should be double
            if(w-currItem[2]>=0){
                maxV+=currItem[1];// should be double
                w-= currItem[2];// should be double
            }
            else{
                maxV+=currItem[0]*w;// should be double
                w-=w;// should be double
            }
        }
        return maxV;

    }
}
/*
//Reference code with correct way
package Greedy_Algorithms.Easy;

import java.util.PriorityQueue;

public class Fractional_Knapsack {

    static class Item {
        int value, weight;
        Item(int x, int y) {
            this.value = x;
            this.weight = y;
        }
    }

    // Function to get the maximum total value in the knapsack.
    double fractionalKnapsack(int w, Item arr[], int n) {
        // PriorityQueue to store items by their value-to-weight ratio in descending order.
        PriorityQueue<Item> maxHeap = new PriorityQueue<>((a, b) -> 
            Double.compare((double) b.value / b.weight, (double) a.value / a.weight)
        );

        // Add all items to the priority queue.
        for (Item item : arr) {
            maxHeap.offer(item);
        }

        // Variable to store the maximum value we can carry in the knapsack.
        double maxValue = 0.0;

        // Process the items in the max heap until the knapsack is full or we run out of items.
        while (w > 0 && !maxHeap.isEmpty()) {
            Item currentItem = maxHeap.poll();
            if (w >= currentItem.weight) {
                // If the remaining weight capacity can fully accommodate the current item.
                maxValue += currentItem.value;
                w -= currentItem.weight;
            } else {
                // If only part of the current item can be accommodated.
                maxValue += ((double) currentItem.value / currentItem.weight) * w;
                w = 0;
            }
        }

        // Return the maximum value we can carry in the knapsack.
        return maxValue;
    }

    public static void main(String[] args) {
        Fractional_Knapsack knapsack = new Fractional_Knapsack();

        // Test case 1
        int n1 = 3;
        int w1 = 50;
        Item[] arr1 = {
            new Item(60, 10),
            new Item(100, 20),
            new Item(120, 30)
        };
        System.out.println("Maximum value in knapsack = " + knapsack.fractionalKnapsack(w1, arr1, n1));

        // Test case 2
        int n2 = 2;
        int w2 = 50;
        Item[] arr2 = {
            new Item(60, 10),
            new Item(100, 20)
        };
        System.out.println("Maximum value in knapsack = " + knapsack.fractionalKnapsack(w2, arr2, n2));
    }
}
//
 */

 /*//Striver's ref. code
 import java.util.*;
class Item {
  int value, weight;
  Item(int x, int y) {
    this.value = x;
    this.weight = y;
  }
}

class itemComparator implements Comparator<Item>
{
    @Override
    public int compare(Item a, Item b) 
    {
        double r1 = (double)(a.value) / (double)(a.weight); 
        double r2 = (double)(b.value) / (double)(b.weight); 
        if(r1 < r2) return 1; 
        else if(r1 > r2) return -1; 
        else return 0; 
    }
}
public class solve{
    static double fractionalKnapsack(int W, Item arr[], int n) {
        Arrays.sort(arr, new itemComparator()); 
        
        int curWeight = 0; 
        double finalvalue = 0.0; 
        
        for (int i = 0; i < n; i++) {
       
            if (curWeight + arr[i].weight <= W) {
                curWeight += arr[i].weight;
                finalvalue += arr[i].value;
            }
     
            else {
                int remain = W - curWeight;
                finalvalue += ((double)arr[i].value / (double)arr[i].weight) * (double)remain;
                break;
            }
        }
     
        return finalvalue;
        
    }
    public static void main(String args[])
    {
        int n = 3, weight = 50;
        Item arr[] = {new Item (100,20),new Item(60,10),new Item(120,30)};
        double ans = fractionalKnapsack(weight, arr, n);
        System.out.println("The maximum value is "+ans);
    }
}
 */
 package Greedy_Algorithms.Easy;

import java.util.ArrayList;
import java.util.Arrays;

/*Q3 Find minimum number of coins


22

51
Problem Statement: Given a value V, if we want to make a change for V Rs, and we have an infinite supply of each of the denominations in Indian currency, i.e., we have an infinite supply of { 1, 2, 5, 10, 20, 50, 100, 500, 1000} valued coins/notes, what is the minimum number of coins and/or notes needed to make the change.

Examples:

Example 1:

Input: V = 70

Output: 2

Explaination: We need a 50 Rs note and a 20 Rs note.

Example 2:

Input: V = 121

Output: 3

Explaination: We need a 100 Rs note, a 20 Rs note and a 1 Rs coin. */
public class Minimum_no_of_coins {
    
    public int MinNoOfCoinChange(int currency[], int n, int v){
        Arrays.sort(currency);
        int cnt=0;
        ArrayList <Integer> change = new ArrayList <>();
        for(int i=n-1;i>=0;i--){
            while (currency[i]<=v) {
                v-=currency[i];
                cnt++;
                change.add(currency[i]);
            }
            if(v==0) break;//optimization
        }
        return cnt;
    }
}
package Greedy_Algorithms.Easy;
/*Q4 860. Lemonade Change
Easy
Topics
Companies
At a lemonade stand, each lemonade costs $5. Customers are standing in a queue to buy from you and order one at a time (in the order specified by bills). Each customer will only buy one lemonade and pay with either a $5, $10, or $20 bill. You must provide the correct change to each customer so that the net transaction is that the customer pays $5.

Note that you do not have any change in hand at first.

Given an integer array bills where bills[i] is the bill the ith customer pays, return true if you can provide every customer with the correct change, or false otherwise.

 

Example 1:

Input: bills = [5,5,5,10,20]
Output: true
Explanation: 
From the first 3 customers, we collect three $5 bills in order.
From the fourth customer, we collect a $10 bill and give back a $5.
From the fifth customer, we give a $10 bill and a $5 bill.
Since all customers got correct change, we output true.
Example 2:

Input: bills = [5,5,10,10,20]
Output: false
Explanation: 
From the first two customers in order, we collect two $5 bills.
For the next two customers in order, we collect a $10 bill and give back a $5 bill.
For the last customer, we can not give the change of $15 back because we only have two $10 bills.
Since not every customer received the correct change, the answer is false.
 

Constraints:

1 <= bills.length <= 105
bills[i] is either 5, 10, or 20.
Seen this question in a real interview before?
1/5
Yes
No
Accepted
205K
Submissions
381.2K
Acceptance Rate
53.8% */
public class Lemonade_Change {
    public boolean lemonadeChange(int[] bills) {
        int five=0, ten=0;
        for(int i=0; i<bills.length;i++){
            if(bills[i]==5) five++;
            else if(bills[i]==10){
                if(five>0){
                    five--;
                    ten++;
                }
                else return false;
            }
            else{
                if(ten>=1 && five>=1)
                {
                    ten--;
                    five--;
                }
                else if(five>=3){
                    five-=3;
                }
                else return false;
            }
        }
        return true;
    }
}
/*
//code with swicth and enhanced for
class Solution {
    public boolean lemonadeChange(int[] bills) {
        int five = 0, ten = 0;

        for (int customer: bills) {
            switch(customer) {
                case 5:
                    five++;
                    break;
                case 10:
                    if (five > 0) { five--; ten++; } else return false;
                    break;
                case 20:
                    if (ten > 0 && five > 0) {
                        ten--; five--;
                    } else if (five > 2) {
                        five -= 3;
                    } else {
                        return false;
                    }
            }
        }

        return true;
    }
}
 */

 package Greedy_Algorithms.Easy;
/*Q5 678. Valid Parenthesis String
Medium
Topics
Companies
Hint
Given a string s containing only three types of characters: '(', ')' and '*', return true if s is valid.

The following rules define a valid string:

Any left parenthesis '(' must have a corresponding right parenthesis ')'.
Any right parenthesis ')' must have a corresponding left parenthesis '('.
Left parenthesis '(' must go before the corresponding right parenthesis ')'.
'*' could be treated as a single right parenthesis ')' or a single left parenthesis '(' or an empty string "".
 

Example 1:

Input: s = "()"
Output: true
Example 2:

Input: s = "(*)"
Output: true
Example 3:

Input: s = "(*))"
Output: true
 

Constraints:

1 <= s.length <= 100
s[i] is '(', ')' or '*'.
Seen this question in a real interview before?
1/5
Yes
No
Accepted
386.8K
Submissions
1M
Acceptance Rate
38.1% */
public class Valid_Parenthesis_String {
    //Attempt 3 - success -> to check why attempt 1 not work but 3 work, dry run on s="(*)"
    public boolean checkValidString(String s) {
        int min=0,max=0;
        for(char c : s.toCharArray()){
            if(c=='(') {
                max++; min++;
            }
            else if(c==')'){
                max--; min--;
            }
            else //if(c=='*')
            {
                min--;
                max++;
            }
            if(min<0)min=0;
            if(max<0)return false;//means 
        }
        //if(min<0||max<0) return false;
        //else
        return(min==0);
        //return (min<=0 && max>=0);
    }
    //Attempt 1
    /*Wrong Answer
        52 / 83 testcases passed

        Editorial
        Input
        s =
        "(*)"

        Use Testcase
        Output
        false
        Expected
        true */
    // public boolean checkValidString(String s) {
    //     int min=0,max=0;
    //     for(char c : s.toCharArray()){
    //         if(c=='(') {
    //             max++; min++;
    //         }
    //         else if(c==')'){
    //             max--; min--;
    //         }
    //         else //if(c=='*')
    //         {
    //             if(min > 0) min--;
    //             max++;
    //         }
    //         if(max<0)return false;//means 
    //     }
    //     // if(min<0||max<0) return false;
    //     // //else
    //     return (min==0);
    // }
}
//attempt 2
/*Wrong Answer
72 / 83 testcases passed

Editorial
Input
s =
"(((((*(()((((*((**(((()()*)()()()*((((**)())*)*)))))))(())(()))())((*()()(((()((()*(())*(()**)()(())"

Use Testcase
Output
true
Expected
false */
// class Solution {
//     public boolean checkValidString(String s) {
//         int min=0,max=0;
//         for(char c : s.toCharArray()){
//             if(c=='(') {
//                 max++; min++;
//             }
//             else if(c==')'){
//                 max--; min--;
//             }
//             else //if(c=='*')
//             {
//                 if(min > 0) min--;
//                 max++;
//             }
//             if(max<0)return false;//means 
//         }
//         //if(min<0||max<0) return false;
//         //else
//         return (min<=0 && max>=0);
//     }
// }

